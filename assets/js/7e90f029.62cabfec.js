"use strict";(self.webpackChunkdoris_website=self.webpackChunkdoris_website||[]).push([["422692"],{22388:function(e,n,l){l.r(n),l.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>t,assets:()=>d,toc:()=>c,contentTitle:()=>i});var t=JSON.parse('{"id":"sql-manual/sql-functions/table-functions/explode","title":"EXPLODE","description":"\x3c!--","source":"@site/versioned_docs/version-3.0/sql-manual/sql-functions/table-functions/explode.md","sourceDirName":"sql-manual/sql-functions/table-functions","slug":"/sql-manual/sql-functions/table-functions/explode","permalink":"/docs/3.0/sql-manual/sql-functions/table-functions/explode","draft":false,"unlisted":false,"tags":[],"version":"3.0","frontMatter":{"title":"EXPLODE","language":"en"},"sidebar":"docs","previous":{"title":"EXPLODE_JSON_ARRAY_JSON","permalink":"/docs/3.0/sql-manual/sql-functions/table-functions/explode-json-array-json"},"next":{"title":"EXPLODE_MAP","permalink":"/docs/3.0/sql-manual/sql-functions/table-functions/explode-map"}}'),s=l("785893"),a=l("250065");let r={title:"EXPLODE",language:"en"},i=void 0,d={},c=[{value:"Description",id:"description",level:2},{value:"Syntax",id:"syntax",level:2},{value:"Required Parameters",id:"required-parameters",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Examples",id:"examples",level:2}];function o(e){let n={code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"explode"})," function takes an array as input and maps each element of the array to a separate row. It is typically used in conjunction with LATERAL VIEW to flatten nested data structures into a standard tabular format. The main difference between explode and ",(0,s.jsx)(n.code,{children:"explode_outer"})," lies in handling empty values."]}),"\n",(0,s.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"EXPLODE(<array>)\nEXPLODE_OUTER(<array>)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"required-parameters",children:"Required Parameters"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"<arr>"})}),(0,s.jsx)(n.td,{children:"Array type"})]})})]}),"\n",(0,s.jsx)(n.h2,{id:"return-value",children:"Return Value"}),"\n",(0,s.jsxs)(n.p,{children:["When the array is not empty or NULL, the return values of ",(0,s.jsx)(n.code,{children:"explode"})," and ",(0,s.jsx)(n.code,{children:"explode_outer"})," are the same."]}),"\n",(0,s.jsx)(n.p,{children:"When the data is empty or NULL:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"explode"})," will not produce any rows and will filter out these records."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"explode_outer"})," if the array is empty, will generate a single row, but the expanded column value will be NULL. If the array is NULL, it will also retain a row and return NULL."]}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"select e1 from (select 1 k1) as t lateral view explode([1,2,3]) tmp1 as e1;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"+------+\n| e1   |\n+------+\n|    1 |\n|    2 |\n|    3 |\n+------+\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select e1 from (select 1 k1) as t lateral view explode_outer(null) tmp1 as e1;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"+------+\n| e1   |\n+------+\n| NULL |\n+------+\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select e1 from (select 1 k1) as t lateral view explode([]) tmp1 as e1;\nEmpty set (0.010 sec)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select e1 from (select 1 k1) as t lateral view explode([null,1,null]) tmp1 as e1;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"+------+\n| e1   |\n+------+\n| NULL |\n|    1 |\n| NULL |\n+------+\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sql",children:"select e1 from (select 1 k1) as t lateral view explode_outer([null,1,null]) tmp1 as e1;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"+------+\n| e1   |\n+------+\n| NULL |\n|    1 |\n| NULL |\n+------+\n"})})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},250065:function(e,n,l){l.d(n,{Z:function(){return i},a:function(){return r}});var t=l(667294);let s={},a=t.createContext(s);function r(e){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);